
#include "Functions.h"

void 		Print_Values	(void);
void 		Check_Status	(int status,char* status_msg);

S_Sensor_data Speed_Data_1;
S_Sensor_data Speed_Data_2;
MPU_data mpu_data;

int main()
{
	int Status;

    init_platform();

    MPU_Initialize();
    PWM_Initialize();

	while(1)
	{
		// Write to ACCEL_XOUT_H to start reading.
		Status = XIicPs_MasterSendPolled(&Iic, MPU_read_accx, 1, IIC_SLAVE_ADDR);
		Check_Status(Status,"MasterSendPolled");

		while (XIicPs_BusIsBusy(&Iic));

		// Read MPU data.
		Status = XIicPs_MasterRecvPolled(&Iic, MPU_buffer, 14, IIC_SLAVE_ADDR);
		Check_Status(Status,"MasterRecvPolled");

		// Parse mpu data.
		mpu_data.acc_x = (MPU_buffer[0] << 8) | MPU_buffer[1];
		mpu_data.acc_y = (MPU_buffer[2] << 8) | MPU_buffer[3];
		mpu_data.acc_z = (MPU_buffer[4] << 8) | MPU_buffer[5];
		mpu_data.gy_x = (MPU_buffer[6] << 8) | MPU_buffer[7];
		mpu_data.gy_y = (MPU_buffer[8] << 8) | MPU_buffer[9];
		mpu_data.gy_z = (MPU_buffer[10] << 8) | MPU_buffer[11];

		// Read Speed sensor data.
		Speed_Data_1.distance = SPEEDSENSOR_IP_mReadReg(XPAR_SPEEDSENSOR_IP_0_S00_AXI_BASEADDR,0);
		Speed_Data_2.distance = SPEEDSENSOR_IP_mReadReg(XPAR_SPEEDSENSOR_IP_1_S00_AXI_BASEADDR,0);
		Speed_Data_1.speed = SPEEDSENSOR_IP_mReadReg(XPAR_SPEEDSENSOR_IP_0_S00_AXI_BASEADDR,4);
		Speed_Data_2.speed = SPEEDSENSOR_IP_mReadReg(XPAR_SPEEDSENSOR_IP_1_S00_AXI_BASEADDR,4);

		Print_Values();

		sleep(2);
	}

	for(;;);
}



