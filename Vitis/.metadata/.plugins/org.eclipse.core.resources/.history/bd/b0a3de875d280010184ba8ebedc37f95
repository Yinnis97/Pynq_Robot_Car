
#include "Functions.h"

void	 	IICPs_Setup		(u16 DeviceId);
void 		Print_Values	(void);
void 		Check_Status	(int status,char* status_msg);

S_Sensor_data Speed_Data_1;
S_Sensor_data Speed_Data_2;
MPU_data mpu_data;

int main()
{
	int Status;

    init_platform();

    // Initialize IIC
    IICPs_Setup(IIC_DEVICE_ID);

    PWM_Initialize();

	while(1)
	{
		// Write to ACCEL_XOUT_H to start reading.
		Status = XIicPs_MasterSendPolled(&Iic, MPU_read_accx, 1, IIC_SLAVE_ADDR);
		Check_Status(Status,"MasterSendPolled");

		while (XIicPs_BusIsBusy(&Iic));

		// Read MPU data.
		Status = XIicPs_MasterRecvPolled(&Iic, MPU_buffer, 14, IIC_SLAVE_ADDR);
		Check_Status(Status,"MasterRecvPolled");

		// Parse mpu data.
		mpu_data.acc_x = (MPU_buffer[0] << 8) | MPU_buffer[1];
		mpu_data.acc_y = (MPU_buffer[2] << 8) | MPU_buffer[3];
		mpu_data.acc_z = (MPU_buffer[4] << 8) | MPU_buffer[5];
		mpu_data.gy_x = (MPU_buffer[6] << 8) | MPU_buffer[7];
		mpu_data.gy_y = (MPU_buffer[8] << 8) | MPU_buffer[9];
		mpu_data.gy_z = (MPU_buffer[10] << 8) | MPU_buffer[11];

		// Read Speed sensor data.
		Speed_Data_1.distance = SPEEDSENSOR_IP_mReadReg(XPAR_SPEEDSENSOR_IP_0_S00_AXI_BASEADDR,0);
		Speed_Data_2.distance = SPEEDSENSOR_IP_mReadReg(XPAR_SPEEDSENSOR_IP_1_S00_AXI_BASEADDR,0);
		Speed_Data_1.speed = SPEEDSENSOR_IP_mReadReg(XPAR_SPEEDSENSOR_IP_0_S00_AXI_BASEADDR,4);
		Speed_Data_2.speed = SPEEDSENSOR_IP_mReadReg(XPAR_SPEEDSENSOR_IP_1_S00_AXI_BASEADDR,4);

		Print_Values();

		sleep(2);
	}

	for(;;);
}

void IICPs_Setup(u16 DeviceId)
{
	int Status;
	XIicPs_Config *Config;

	Config = XIicPs_LookupConfig(DeviceId);

	Status = XIicPs_CfgInitialize(&Iic, Config, Config->BaseAddress);
	Check_Status(Status, "IICPs_Setup -> XIicPs_CfgInitialize");

	XIicPs_SetSClk(&Iic, IIC_SCLK_RATE);

	Status = XIicPs_MasterSendPolled(&Iic, MPU_wake_up_data, 2, IIC_SLAVE_ADDR);
	Check_Status(Status, "IICPs_Setup -> XIicPs_MasterSendPolled");

	while (XIicPs_BusIsBusy(&Iic));
	usleep(1000);
}

void Print_Values(void)
{
	printf("--------------------------------------------------\n\r");
	printf("Accelerometer Data : \n\r");
	printf("		X = %d\n\r", mpu_data.acc_x);
	printf("		Y = %d\n\r", mpu_data.acc_y);
	printf("		Z = %d\n\r", mpu_data.acc_z);

	printf("Gyroscope Data : \n\r");
	printf("		X = %d\n\r", mpu_data.gy_x);
	printf("		Y = %d\n\r", mpu_data.gy_y);
	printf("		Z = %d\n\r", mpu_data.gy_z);

	printf("Speed Sensor Data : \n\r");
	printf("		Distance 1: %ld\n\r", Speed_Data_1.distance);
	printf("		Distance 2: %ld\n\r", Speed_Data_2.distance);
	printf("		Speed 1: %ld\n\r", Speed_Data_1.speed);
	printf("		Speed 2: %ld\n\r", Speed_Data_2.speed);
	printf("--------------------------------------------------\n\r");
}

void Check_Status(int status, char* status_msg)
{
	if (status != XST_SUCCESS)
	{
	    xil_printf("Status Check Failed!\n\r");
	    xil_printf("Error at %s\n\r",status_msg);
	    xil_printf("Status : %d \n\r",status);
	}
}
